// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace WwwFinal.Pages.Student
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\Ayman\source\repos\WwwFinal\WwwFinal\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Ayman\source\repos\WwwFinal\WwwFinal\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Ayman\source\repos\WwwFinal\WwwFinal\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Ayman\source\repos\WwwFinal\WwwFinal\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Ayman\source\repos\WwwFinal\WwwFinal\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Ayman\source\repos\WwwFinal\WwwFinal\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Ayman\source\repos\WwwFinal\WwwFinal\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Ayman\source\repos\WwwFinal\WwwFinal\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Ayman\source\repos\WwwFinal\WwwFinal\_Imports.razor"
using WwwFinal;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\Ayman\source\repos\WwwFinal\WwwFinal\_Imports.razor"
using WwwFinal.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Ayman\source\repos\WwwFinal\WwwFinal\Pages\Student\TakeExam.razor"
using WwwFinal.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Ayman\source\repos\WwwFinal\WwwFinal\Pages\Student\TakeExam.razor"
using WwwFinal.Controllers;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Ayman\source\repos\WwwFinal\WwwFinal\Pages\Student\TakeExam.razor"
using WwwPracticeDb;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Ayman\source\repos\WwwFinal\WwwFinal\Pages\Student\TakeExam.razor"
using WwwPracticeDb.Models;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/student/takeExam/{examID}")]
    public partial class TakeExam : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 71 "C:\Users\Ayman\source\repos\WwwFinal\WwwFinal\Pages\Student\TakeExam.razor"
       
    [Parameter]
    public string examID { get; set; }

    private List<QuestionModel> list;
    private List<QuestionPagesModel> webList;
    private List<QuestionData> returnList;
    private List<string[]> ListOfQuestionAnswers = new List<string[]>();
    private List<ChoosenAnswersModel> choosenAnswers = new List<ChoosenAnswersModel>();
    private string choosenAnswer;
    string[] answers = new string[4];
    private int index;


    protected async override Task OnInitializedAsync()
    {
        index = 0;
        list = await _db.GetExamingQuestions(1, 1);
        webList = new List<QuestionPagesModel>();

        for(int i = 0; i < list.Count; i++)
        {
            webList.Add(new QuestionPagesModel(list[i].questionID, list[i].question, list[i].Canswer, list[i].Ranswer01, list[i].Ranswer02, list[i].Ranswer03, i));

            answers = randomize(list[i]);
            ListOfQuestionAnswers.Add(answers);
            choosenAnswers.Add(new ChoosenAnswersModel());
        }
    }

    private async Task incriment()
    {
        index++;
    }

    private async Task Submit()
    {
        int mark = await _db.verify(choosenAnswers);

        await _db2.AddMark(mark, loginState.LoginID, int.Parse(examID));

        await js.InvokeVoidAsync("alert", $"your mark was {mark}");

        nvm.NavigateTo("/");
    }

    private async Task ChooseAnswer(QuestionPagesModel q, int ans)
    {
        choosenAnswer = ListOfQuestionAnswers[q.index][ans];
        choosenAnswers[q.index].answer = choosenAnswer;
        choosenAnswers[q.index].questionID = q.questionID;
        choosenAnswer = null;
    }

    private string[] randomize(QuestionModel q)
    {
        string[] answers = new string[4];

        int[] puttedAnswers = new int[4] { 9, 9, 9, 9 };
        Random rand = new Random();
        int random;

        bool found = false;

        random = rand.Next(4);
        puttedAnswers[0] = random;
        answers[random] = q.Canswer;

        while (true)
        {
            found = false;
            random = rand.Next(4);
            for (int i = 0; i < 4; i++)
            {
                if(puttedAnswers[i] == random)
                {
                    found = true;
                }
            }
            if(!found)
            {
                puttedAnswers[1] = random;
                answers[random] = q.Ranswer01;
                break;
            }
        }

        while (true)
        {
            found = false;
            random = rand.Next(4);
            for (int i = 0; i < 4; i++)
            {
                if (puttedAnswers[i] == random)
                {
                    found = true;
                }
            }
            if (!found)
            {
                puttedAnswers[2] = random;
                answers[random] = q.Ranswer02;
                break;
            }
        }

        while (true)
        {
            found = false;
            random = rand.Next(4);
            for (int i = 0; i < 4; i++)
            {
                if (puttedAnswers[i] == random)
                {
                    found = true;
                }
            }
            if (!found)
            {
                puttedAnswers[3] = random;
                answers[random] = q.Ranswer03;
                break;
            }
        }

        return answers;

    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private LoginState loginState { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IMarkData _db2 { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IQuestionData _db { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime js { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager nvm { get; set; }
    }
}
#pragma warning restore 1591
